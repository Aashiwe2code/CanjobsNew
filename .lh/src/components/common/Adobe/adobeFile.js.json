{
    "sourceFile": "src/components/common/Adobe/adobeFile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 35,
            "patches": [
                {
                    "date": 1714546676408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1714546690296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                        \r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                    viewSDKClient.registerSaveApiHandler()\r\n+                                    console.log(viewSDKClient.registerSaveApiHandler())\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            // viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714546798932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n                                     } else if (event.type === 'ANNOTATION_DELETED') {\r\n                                         viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n                                     }\r\n                                     viewSDKClient.registerSaveApiHandler()\r\n-                                    console.log(viewSDKClient.registerSaveApiHandler())\r\n+                                    console.log(viewSDKClient.registerSaveApiHandler(),\"ppppppppppppp\")\r\n                                 },\r\n                                 eventOptions,\r\n                             );\r\n \r\n@@ -74,9 +74,9 @@\n                 .catch(e => {\r\n                     console.log(e);\r\n                 });\r\n \r\n-            // viewSDKClient.registerSaveApiHandler();\r\n+            viewSDKClient.registerSaveApiHandler();\r\n         });\r\n // eslint-disable-next-line\r\n     }, [annotationId, annotationData]);\r\n     return (\r\n@@ -87,93 +87,4 @@\n }\r\n \r\n export default AdobePDFViewer;\r\n \r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                        \r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                    viewSDKClient.registerSaveApiHandler()\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            // viewSDKClient.registerSaveApiHandler();\r\n-        });\r\n-// eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n"
                },
                {
                    "date": 1714546939557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n     useEffect(() => {\r\n         const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.registerSaveApiHandler();\r\n         viewSDKClient.ready().then(() => {\r\n             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n                 showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n                 showDownloadPDF: true, showPrintPDF: true,\r\n"
                },
                {
                    "date": 1714546958480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                        \r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                    viewSDKClient.registerSaveApiHandler();\r\n+\r\n+                                    console.log(viewSDKClient.registerSaveApiHandler(),\"ppppppppppppp\")\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714547100504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,18 +51,14 @@\n                                         // Include AdminDetails for annotations \r\n                                         const newAnnotation = event.data;\r\n                                         newAnnotation.creator = AdminDetails;\r\n                                         viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                        \r\n                                     }\r\n                                     else if (event.type === 'ANNOTATION_UPDATED') {\r\n                                         viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n                                     } else if (event.type === 'ANNOTATION_DELETED') {\r\n                                         viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n                                     }\r\n-                                    viewSDKClient.registerSaveApiHandler();\r\n-\r\n-                                    console.log(viewSDKClient.registerSaveApiHandler(),\"ppppppppppppp\")\r\n                                 },\r\n                                 eventOptions,\r\n                             );\r\n \r\n@@ -88,95 +84,4 @@\n }\r\n \r\n export default AdobePDFViewer;\r\n \r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.registerSaveApiHandler();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                        \r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                    viewSDKClient.registerSaveApiHandler()\r\n-                                    console.log(viewSDKClient.registerSaveApiHandler(),\"ppppppppppppp\")\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-        });\r\n-// eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n"
                },
                {
                    "date": 1714548042839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                                 },\r\n                                 eventOptions,\r\n                             );\r\n \r\n-\r\n+                            viewSDKClient.registerSaveApiHandler();\r\n                         })\r\n                         .catch(e => {\r\n                             console.log(e);\r\n                         });\r\n"
                },
                {
                    "date": 1714548183476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n                 .catch(e => {\r\n                     console.log(e);\r\n                 });\r\n \r\n-            viewSDKClient.registerSaveApiHandler();\r\n+            console.log(viewSDKClient.registerSaveApiHandler())\r\n         });\r\n // eslint-disable-next-line\r\n     }, [annotationId, annotationData]);\r\n     return (\r\n"
                },
                {
                    "date": 1714548294987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714562510955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true, autoSaveFrequency:10000,\r\n+                enableFocusPolling: false,\r\n+                showSaveButton: false\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714562572338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,97 +8,8 @@\n         const viewSDKClient = new ViewSDKClient();\r\n         viewSDKClient.ready().then(() => {\r\n             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n                 showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true, autoSaveFrequency:10000,\r\n-                enableFocusPolling: false,\r\n-                showSaveButton: false\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-        });\r\n-// eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n                 showDownloadPDF: true, showPrintPDF: true,\r\n             }, url, data, userId, annotationId);\r\n             const eventOptions = {\r\n                 listenOn: [\r\n@@ -173,91 +84,4 @@\n }\r\n \r\n export default AdobePDFViewer;\r\n \r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-                            viewSDKClient.registerSaveApiHandler();\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            console.log(viewSDKClient.registerSaveApiHandler())\r\n-        });\r\n-// eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n"
                },
                {
                    "date": 1714567634161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    console.log(commentsList)\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714568411602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import React, { useEffect/*, useRef */ } from 'react';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n \r\n const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    console.log(commentsList)\r\n     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n     useEffect(() => {\r\n         const viewSDKClient = new ViewSDKClient();\r\n@@ -85,91 +84,4 @@\n }\r\n \r\n export default AdobePDFViewer;\r\n \r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-        });\r\n-// eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n"
                },
                {
                    "date": 1714568954386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n \r\n const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    console.log(annotationData)\r\n     useEffect(() => {\r\n         const viewSDKClient = new ViewSDKClient();\r\n         viewSDKClient.ready().then(() => {\r\n             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n"
                },
                {
                    "date": 1714569004890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import ViewSDKClient from './ViewSDKClient.js';\r\n \r\n const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[1].doctaskjson)\r\n     console.log(annotationData)\r\n     useEffect(() => {\r\n         const viewSDKClient = new ViewSDKClient();\r\n         viewSDKClient.ready().then(() => {\r\n"
                },
                {
                    "date": 1714569254344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,9 @@\n import ViewSDKClient from './ViewSDKClient.js';\r\n \r\n const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[1].doctaskjson)\r\n-    console.log(annotationData)\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n     useEffect(() => {\r\n         const viewSDKClient = new ViewSDKClient();\r\n         viewSDKClient.ready().then(() => {\r\n             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n"
                },
                {
                    "date": 1714569317809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n \r\n const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    console.log(annotationData)\r\n     useEffect(() => {\r\n         const viewSDKClient = new ViewSDKClient();\r\n         viewSDKClient.ready().then(() => {\r\n             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n"
                },
                {
                    "date": 1714569843673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    console.log(annotationData)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714570135852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714626993625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n     useEffect(() => {\r\n         const viewSDKClient = new ViewSDKClient();\r\n         viewSDKClient.ready().then(() => {\r\n+            viewSDKClient.registerGetUserSettingHandler();\r\n             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n                 showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n                 showDownloadPDF: true, showPrintPDF: true,\r\n             }, url, data, userId, annotationId);\r\n@@ -84,180 +85,4 @@\n }\r\n \r\n export default AdobePDFViewer;\r\n \r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    console.log(annotationData)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-        });\r\n-// eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    console.log(annotationData)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-        });\r\n-// eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n"
                },
                {
                    "date": 1714627358644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,101 @@\n-import React, { useEffect/*, useRef */ } from 'react';\r\n+// import React, { useEffect/*, useRef */ } from 'react';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+// const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+//     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+//     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+//     useEffect(() => {\r\n+//         const viewSDKClient = new ViewSDKClient();\r\n+//         viewSDKClient.ready().then(() => {\r\n+//             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+//                 showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+//                 showDownloadPDF: true, showPrintPDF: true,\r\n+//             }, url, data, userId, annotationId);\r\n+//             const eventOptions = {\r\n+//                 listenOn: [\r\n+//                     \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+//                 ],\r\n+//             }\r\n+//             const AdminDetails = {\r\n+//                 \"id\": localStorage.getItem(\"admin_id\"),\r\n+//                 \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+//                 \"type\": \"Person\"\r\n+//             }\r\n+//             previewFilePromise\r\n+//                 .then((adobeViewer) => {\r\n+\r\n+//                     adobeViewer.getAnnotationManager()\r\n+//                         .then(annotationManager => {\r\n+\r\n+//                             if (annotationData.length === 0) {\r\n+//                                 console.log(\"No Annotation data\")\r\n+//                             }\r\n+//                             else {\r\n+//                                 annotationManager.addAnnotations(annotationData)\r\n+//                                 .then(() => console.log(\"Success\"))\r\n+//                                 .catch(error => console.log(error));\r\n+//                             }\r\n+\r\n+\r\n+//                             annotationManager.getAnnotations()\r\n+//                                 .then(result => {\r\n+//                                     viewSDKClient.annots = result;\r\n+//                                 })\r\n+//                                 .catch(e => {\r\n+//                                     console.log(e);\r\n+//                                 });\r\n+//                             annotationManager.registerEventListener(\r\n+//                                 function (event) {\r\n+//                                     // console.log(event.type, event.data, event)\r\n+//                                     if (event.type === 'ANNOTATION_ADDED') {\r\n+//                                         // Include AdminDetails for annotations \r\n+//                                         const newAnnotation = event.data;\r\n+//                                         newAnnotation.creator = AdminDetails;\r\n+//                                         viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+//                                     }\r\n+//                                     else if (event.type === 'ANNOTATION_UPDATED') {\r\n+//                                         viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+//                                     } else if (event.type === 'ANNOTATION_DELETED') {\r\n+//                                         viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+//                                     }\r\n+//                                 },\r\n+//                                 eventOptions,\r\n+//                             );\r\n+\r\n+\r\n+//                         })\r\n+//                         .catch(e => {\r\n+//                             console.log(e);\r\n+//                         });\r\n+//                 })\r\n+//                 .catch(e => {\r\n+//                     console.log(e);\r\n+//                 });\r\n+\r\n+//             viewSDKClient.registerSaveApiHandler();\r\n+//         });\r\n+// // eslint-disable-next-line\r\n+//     }, [annotationId, annotationData]);\r\n+//     return (\r\n+//         <div style={{ height: \"100vh\" }}>\r\n+//             <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+//         </div>\r\n+//     );\r\n+// }\r\n+\r\n+// export default AdobePDFViewer;\r\n+\r\n+import React, { useEffect } from 'react';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n \r\n const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id;\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson);\r\n+\r\n     useEffect(() => {\r\n         const viewSDKClient = new ViewSDKClient();\r\n         viewSDKClient.ready().then(() => {\r\n-            viewSDKClient.registerGetUserSettingHandler();\r\n             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n                 showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n                 showDownloadPDF: true, showPrintPDF: true,\r\n             }, url, data, userId, annotationId);\r\n@@ -32,10 +119,10 @@\n                                 console.log(\"No Annotation data\")\r\n                             }\r\n                             else {\r\n                                 annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n+                                    .then(() => console.log(\"Success\"))\r\n+                                    .catch(error => console.log(error));\r\n                             }\r\n \r\n \r\n                             annotationManager.getAnnotations()\r\n@@ -74,15 +161,15 @@\n                 });\r\n \r\n             viewSDKClient.registerSaveApiHandler();\r\n         });\r\n-// eslint-disable-next-line\r\n+        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n     }, [annotationId, annotationData]);\r\n+\r\n     return (\r\n         <div style={{ height: \"100vh\" }}>\r\n             <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n         </div>\r\n     );\r\n }\r\n \r\n export default AdobePDFViewer;\r\n-\r\n"
                },
                {
                    "date": 1714627990188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                    .then(() => console.log(\"Success\"))\r\n+                                    .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+            viewSDKClient.getUserSettingHandler()\r\n+        });\r\n+        // eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714628015905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                    .then(() => console.log(\"Success\"))\r\n+                                    .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+            viewSDKClient.getUserSettingHandler();\r\n+        });\r\n+        // eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714628043676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.getUserSettingHandler();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714628114159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n     useEffect(() => {\r\n         const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.getUserSettingHandler();\r\n         viewSDKClient.ready().then(() => {\r\n             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n                 showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n                 showDownloadPDF: true, showPrintPDF: true,\r\n@@ -85,355 +84,4 @@\n }\r\n \r\n export default AdobePDFViewer;\r\n \r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                    .then(() => console.log(\"Success\"))\r\n-                                    .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-            viewSDKClient.getUserSettingHandler();\r\n-        });\r\n-        // eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                    .then(() => console.log(\"Success\"))\r\n-                                    .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-            viewSDKClient.getUserSettingHandler()\r\n-        });\r\n-        // eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n-// import React, { useEffect/*, useRef */ } from 'react';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-// const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-//     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-//     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-//     useEffect(() => {\r\n-//         const viewSDKClient = new ViewSDKClient();\r\n-//         viewSDKClient.ready().then(() => {\r\n-//             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-//                 showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-//                 showDownloadPDF: true, showPrintPDF: true,\r\n-//             }, url, data, userId, annotationId);\r\n-//             const eventOptions = {\r\n-//                 listenOn: [\r\n-//                     \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-//                 ],\r\n-//             }\r\n-//             const AdminDetails = {\r\n-//                 \"id\": localStorage.getItem(\"admin_id\"),\r\n-//                 \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-//                 \"type\": \"Person\"\r\n-//             }\r\n-//             previewFilePromise\r\n-//                 .then((adobeViewer) => {\r\n-\r\n-//                     adobeViewer.getAnnotationManager()\r\n-//                         .then(annotationManager => {\r\n-\r\n-//                             if (annotationData.length === 0) {\r\n-//                                 console.log(\"No Annotation data\")\r\n-//                             }\r\n-//                             else {\r\n-//                                 annotationManager.addAnnotations(annotationData)\r\n-//                                 .then(() => console.log(\"Success\"))\r\n-//                                 .catch(error => console.log(error));\r\n-//                             }\r\n-\r\n-\r\n-//                             annotationManager.getAnnotations()\r\n-//                                 .then(result => {\r\n-//                                     viewSDKClient.annots = result;\r\n-//                                 })\r\n-//                                 .catch(e => {\r\n-//                                     console.log(e);\r\n-//                                 });\r\n-//                             annotationManager.registerEventListener(\r\n-//                                 function (event) {\r\n-//                                     // console.log(event.type, event.data, event)\r\n-//                                     if (event.type === 'ANNOTATION_ADDED') {\r\n-//                                         // Include AdminDetails for annotations \r\n-//                                         const newAnnotation = event.data;\r\n-//                                         newAnnotation.creator = AdminDetails;\r\n-//                                         viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-//                                     }\r\n-//                                     else if (event.type === 'ANNOTATION_UPDATED') {\r\n-//                                         viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-//                                     } else if (event.type === 'ANNOTATION_DELETED') {\r\n-//                                         viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-//                                     }\r\n-//                                 },\r\n-//                                 eventOptions,\r\n-//                             );\r\n-\r\n-\r\n-//                         })\r\n-//                         .catch(e => {\r\n-//                             console.log(e);\r\n-//                         });\r\n-//                 })\r\n-//                 .catch(e => {\r\n-//                     console.log(e);\r\n-//                 });\r\n-\r\n-//             viewSDKClient.registerSaveApiHandler();\r\n-//         });\r\n-// // eslint-disable-next-line\r\n-//     }, [annotationId, annotationData]);\r\n-//     return (\r\n-//         <div style={{ height: \"100vh\" }}>\r\n-//             <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-//         </div>\r\n-//     );\r\n-// }\r\n-\r\n-// export default AdobePDFViewer;\r\n-\r\n-import React, { useEffect } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id;\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson);\r\n-\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                    .then(() => console.log(\"Success\"))\r\n-                                    .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-        });\r\n-        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-    }, [annotationId, annotationData]);\r\n-\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n"
                },
                {
                    "date": 1714628122963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714629780984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714630009279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false,\r\n+                showLeftHandPanel: true,\r\n+                showPageControls: true,\r\n+                enableAnnotationAPIs: true,\r\n+                includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+                defaultUser: {\r\n+                    \"id\": localStorage.getItem(\"admin_id\"),\r\n+                    \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                    \"type\": \"Person\"\r\n+                }\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                    .then(() => console.log(\"Success\"))\r\n+                                    .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+        // eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714630313263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useEffect/*, useRef */ } from 'react';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n \r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList ,setApiCall}) => {\r\n     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n     useEffect(() => {\r\n         const viewSDKClient = new ViewSDKClient();\r\n@@ -18,9 +18,9 @@\n                     \"id\": localStorage.getItem(\"admin_id\"),\r\n                     \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n                     \"type\": \"Person\"\r\n                 }\r\n-            }, url, data, userId, annotationId);\r\n+            }, url, data, userId, annotationId,setApiCall);\r\n             const eventOptions = {\r\n                 listenOn: [\r\n                     \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n                 ],\r\n"
                },
                {
                    "date": 1714640014088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,103 +1,7 @@\n import React, { useEffect/*, useRef */ } from 'react';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n \r\n-const AdobePDFViewer = ({ url, data, userId, commentsList ,setApiCall}) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false,\r\n-                showLeftHandPanel: true,\r\n-                showPageControls: true,\r\n-                enableAnnotationAPIs: true,\r\n-                includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-                defaultUser: {\r\n-                    \"id\": localStorage.getItem(\"admin_id\"),\r\n-                    \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                    \"type\": \"Person\"\r\n-                }\r\n-            }, url, data, userId, annotationId,setApiCall);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                    .then(() => console.log(\"Success\"))\r\n-                                    .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-        });\r\n-        // eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n     useEffect(() => {\r\n@@ -168,8 +72,9 @@\n                     console.log(e);\r\n                 });\r\n \r\n             viewSDKClient.registerSaveApiHandler();\r\n+            viewSDKClient.registerGetUserProfileApiHandler()\r\n         });\r\n // eslint-disable-next-line\r\n     }, [annotationId, annotationData]);\r\n     return (\r\n@@ -180,178 +85,4 @@\n }\r\n \r\n export default AdobePDFViewer;\r\n \r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-        });\r\n-// eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-        });\r\n-// eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n"
                },
                {
                    "date": 1714642834278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            // const AdminDetails = {\r\n+            //     \"id\": localStorage.getItem(\"admin_id\"),\r\n+            //     \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+            //     \"type\": \"Person\"\r\n+            // }\r\n+            // previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        // newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+            viewSDKClient.registerGetUserProfileApiHandler()\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714644201720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n             //     \"id\": localStorage.getItem(\"admin_id\"),\r\n             //     \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n             //     \"type\": \"Person\"\r\n             // }\r\n-            // previewFilePromise\r\n+            previewFilePromise\r\n                 .then((adobeViewer) => {\r\n \r\n                     adobeViewer.getAnnotationManager()\r\n                         .then(annotationManager => {\r\n@@ -85,92 +85,4 @@\n }\r\n \r\n export default AdobePDFViewer;\r\n \r\n-import React, { useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            const AdminDetails = {\r\n-                \"id\": localStorage.getItem(\"admin_id\"),\r\n-                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-                \"type\": \"Person\"\r\n-            }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n-\r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n-\r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n-                            }\r\n-\r\n-\r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n-\r\n-\r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n-\r\n-            viewSDKClient.registerSaveApiHandler();\r\n-            viewSDKClient.registerGetUserProfileApiHandler()\r\n-        });\r\n-// eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n"
                },
                {
                    "date": 1714645833634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,83 +1,121 @@\n-import React, { useEffect/*, useRef */ } from 'react';\r\n+import React, {useState, useEffect/*, useRef */ } from 'react';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n \r\n const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-    useEffect(() => {\r\n-        const viewSDKClient = new ViewSDKClient();\r\n-        viewSDKClient.ready().then(() => {\r\n-            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-                showDownloadPDF: true, showPrintPDF: true,\r\n-            }, url, data, userId, annotationId);\r\n-            const eventOptions = {\r\n-                listenOn: [\r\n-                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-                ],\r\n-            }\r\n-            // const AdminDetails = {\r\n-            //     \"id\": localStorage.getItem(\"admin_id\"),\r\n-            //     \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-            //     \"type\": \"Person\"\r\n-            // }\r\n-            previewFilePromise\r\n-                .then((adobeViewer) => {\r\n \r\n-                    adobeViewer.getAnnotationManager()\r\n-                        .then(annotationManager => {\r\n+  const [pdfUrl, setPdfUrl] = useState('');\r\n \r\n-                            if (annotationData.length === 0) {\r\n-                                console.log(\"No Annotation data\")\r\n-                            }\r\n-                            else {\r\n-                                annotationManager.addAnnotations(annotationData)\r\n-                                .then(() => console.log(\"Success\"))\r\n-                                .catch(error => console.log(error));\r\n-                            }\r\n+  useEffect(() => {\r\n+    async function convertImageToPdf(imageUrl) {\r\n+      const image = new Image();\r\n+      image.crossOrigin = 'Anonymous'; // Needed for CORS-enabled images\r\n+      image.onload = () => {\r\n+        const canvas = document.createElement('canvas');\r\n+        canvas.width = image.width;\r\n+        canvas.height = image.height;\r\n \r\n+        const ctx = canvas.getContext('2d');\r\n+        ctx.drawImage(image, 0, 0);\r\n \r\n-                            annotationManager.getAnnotations()\r\n-                                .then(result => {\r\n-                                    viewSDKClient.annots = result;\r\n-                                })\r\n-                                .catch(e => {\r\n-                                    console.log(e);\r\n-                                });\r\n-                            annotationManager.registerEventListener(\r\n-                                function (event) {\r\n-                                    // console.log(event.type, event.data, event)\r\n-                                    if (event.type === 'ANNOTATION_ADDED') {\r\n-                                        // Include AdminDetails for annotations \r\n-                                        const newAnnotation = event.data;\r\n-                                        // newAnnotation.creator = AdminDetails;\r\n-                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-                                    }\r\n-                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n-                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n-                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-                                    }\r\n-                                },\r\n-                                eventOptions,\r\n-                            );\r\n+        const pdfContent = canvas.toDataURL('image/jpeg');\r\n+        const pdfDoc = {\r\n+          content: [\r\n+            {\r\n+              image: pdfContent,\r\n+              width: canvas.width,\r\n+              height: canvas.height,\r\n+            },\r\n+          ],\r\n+        };\r\n \r\n+        const blob = new Blob([JSON.stringify(pdfDoc)], { type: 'application/pdf' });\r\n+        const url = URL.createObjectURL(blob);\r\n+        setPdfUrl(url); // Set the PDF URL in state\r\n+        URL.revokeObjectURL(url);\r\n+      };\r\n+      image.src = imageUrl;\r\n+    }\r\n \r\n-                        })\r\n-                        .catch(e => {\r\n-                            console.log(e);\r\n-                        });\r\n-                })\r\n-                .catch(e => {\r\n-                    console.log(e);\r\n-                });\r\n+    convertImageToPdf(url);\r\n+  }, []);\r\n+console.log(pdfUrl)\r\n+  \r\n+//     useEffect(() => {\r\n+//         const viewSDKClient = new ViewSDKClient();\r\n+//         viewSDKClient.ready().then(() => {\r\n+//             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+//                 showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+//                 showDownloadPDF: true, showPrintPDF: true,\r\n+//             }, url, data, userId, annotationId);\r\n+//             const eventOptions = {\r\n+//                 listenOn: [\r\n+//                     \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+//                 ],\r\n+//             }\r\n+//             // const AdminDetails = {\r\n+//             //     \"id\": localStorage.getItem(\"admin_id\"),\r\n+//             //     \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+//             //     \"type\": \"Person\"\r\n+//             // }\r\n+//             previewFilePromise\r\n+//                 .then((adobeViewer) => {\r\n \r\n-            viewSDKClient.registerSaveApiHandler();\r\n-            viewSDKClient.registerGetUserProfileApiHandler()\r\n-        });\r\n-// eslint-disable-next-line\r\n-    }, [annotationId, annotationData]);\r\n+//                     adobeViewer.getAnnotationManager()\r\n+//                         .then(annotationManager => {\r\n+\r\n+//                             if (annotationData.length === 0) {\r\n+//                                 console.log(\"No Annotation data\")\r\n+//                             }\r\n+//                             else {\r\n+//                                 annotationManager.addAnnotations(annotationData)\r\n+//                                 .then(() => console.log(\"Success\"))\r\n+//                                 .catch(error => console.log(error));\r\n+//                             }\r\n+\r\n+\r\n+//                             annotationManager.getAnnotations()\r\n+//                                 .then(result => {\r\n+//                                     viewSDKClient.annots = result;\r\n+//                                 })\r\n+//                                 .catch(e => {\r\n+//                                     console.log(e);\r\n+//                                 });\r\n+//                             annotationManager.registerEventListener(\r\n+//                                 function (event) {\r\n+//                                     // console.log(event.type, event.data, event)\r\n+//                                     if (event.type === 'ANNOTATION_ADDED') {\r\n+//                                         // Include AdminDetails for annotations \r\n+//                                         const newAnnotation = event.data;\r\n+//                                         // newAnnotation.creator = AdminDetails;\r\n+//                                         viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+//                                     }\r\n+//                                     else if (event.type === 'ANNOTATION_UPDATED') {\r\n+//                                         viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+//                                     } else if (event.type === 'ANNOTATION_DELETED') {\r\n+//                                         viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+//                                     }\r\n+//                                 },\r\n+//                                 eventOptions,\r\n+//                             );\r\n+\r\n+\r\n+//                         })\r\n+//                         .catch(e => {\r\n+//                             console.log(e);\r\n+//                         });\r\n+//                 })\r\n+//                 .catch(e => {\r\n+//                     console.log(e);\r\n+//                 });\r\n+\r\n+//             viewSDKClient.registerSaveApiHandler();\r\n+//             viewSDKClient.registerGetUserProfileApiHandler()\r\n+//         });\r\n+// // eslint-disable-next-line\r\n+//     }, [annotationId, annotationData]);\r\n     return (\r\n         <div style={{ height: \"100vh\" }}>\r\n             <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n         </div>\r\n"
                },
                {
                    "date": 1714645982412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import React, {useState, useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+\r\n+  const [pdfUrl, setPdfUrl] = useState('');\r\n+\r\n+  useEffect(() => {\r\n+    async function convertImageToPdf(imageUrl) {\r\n+      const image = new Image();\r\n+      image.crossOrigin = 'Anonymous'; // Needed for CORS-enabled images\r\n+      image.onload = () => {\r\n+        const canvas = document.createElement('canvas');\r\n+        canvas.width = image.width;\r\n+        canvas.height = image.height;\r\n+\r\n+        const ctx = canvas.getContext('2d');\r\n+        ctx.drawImage(image, 0, 0);\r\n+\r\n+        const pdfContent = canvas.toDataURL('image/jpeg');\r\n+        const pdfDoc = {\r\n+          content: [\r\n+            {\r\n+              image: pdfContent,\r\n+              width: canvas.width,\r\n+              height: canvas.height,\r\n+            },\r\n+          ],\r\n+        };\r\n+\r\n+        const blob = new Blob([JSON.stringify(pdfDoc)], { type: 'application/pdf' });\r\n+        const url = URL.createObjectURL(blob);\r\n+        console.log(blob,url)\r\n+        setPdfUrl(url); // Set the PDF URL in state\r\n+        URL.revokeObjectURL(url);\r\n+      };\r\n+      image.src = imageUrl;\r\n+    }\r\n+\r\n+    convertImageToPdf(url);\r\n+  }, []);\r\n+console.log(pdfUrl)\r\n+  \r\n+//     useEffect(() => {\r\n+//         const viewSDKClient = new ViewSDKClient();\r\n+//         viewSDKClient.ready().then(() => {\r\n+//             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+//                 showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+//                 showDownloadPDF: true, showPrintPDF: true,\r\n+//             }, url, data, userId, annotationId);\r\n+//             const eventOptions = {\r\n+//                 listenOn: [\r\n+//                     \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+//                 ],\r\n+//             }\r\n+//             // const AdminDetails = {\r\n+//             //     \"id\": localStorage.getItem(\"admin_id\"),\r\n+//             //     \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+//             //     \"type\": \"Person\"\r\n+//             // }\r\n+//             previewFilePromise\r\n+//                 .then((adobeViewer) => {\r\n+\r\n+//                     adobeViewer.getAnnotationManager()\r\n+//                         .then(annotationManager => {\r\n+\r\n+//                             if (annotationData.length === 0) {\r\n+//                                 console.log(\"No Annotation data\")\r\n+//                             }\r\n+//                             else {\r\n+//                                 annotationManager.addAnnotations(annotationData)\r\n+//                                 .then(() => console.log(\"Success\"))\r\n+//                                 .catch(error => console.log(error));\r\n+//                             }\r\n+\r\n+\r\n+//                             annotationManager.getAnnotations()\r\n+//                                 .then(result => {\r\n+//                                     viewSDKClient.annots = result;\r\n+//                                 })\r\n+//                                 .catch(e => {\r\n+//                                     console.log(e);\r\n+//                                 });\r\n+//                             annotationManager.registerEventListener(\r\n+//                                 function (event) {\r\n+//                                     // console.log(event.type, event.data, event)\r\n+//                                     if (event.type === 'ANNOTATION_ADDED') {\r\n+//                                         // Include AdminDetails for annotations \r\n+//                                         const newAnnotation = event.data;\r\n+//                                         // newAnnotation.creator = AdminDetails;\r\n+//                                         viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+//                                     }\r\n+//                                     else if (event.type === 'ANNOTATION_UPDATED') {\r\n+//                                         viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+//                                     } else if (event.type === 'ANNOTATION_DELETED') {\r\n+//                                         viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+//                                     }\r\n+//                                 },\r\n+//                                 eventOptions,\r\n+//                             );\r\n+\r\n+\r\n+//                         })\r\n+//                         .catch(e => {\r\n+//                             console.log(e);\r\n+//                         });\r\n+//                 })\r\n+//                 .catch(e => {\r\n+//                     console.log(e);\r\n+//                 });\r\n+\r\n+//             viewSDKClient.registerSaveApiHandler();\r\n+//             viewSDKClient.registerGetUserProfileApiHandler()\r\n+//         });\r\n+// // eslint-disable-next-line\r\n+//     }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                },
                {
                    "date": 1714646090170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         };\r\n \r\n         const blob = new Blob([JSON.stringify(pdfDoc)], { type: 'application/pdf' });\r\n         const url = URL.createObjectURL(blob);\r\n-        console.log(blob,url)\r\n+        console.log(blob,pdfDoc)\r\n         setPdfUrl(url); // Set the PDF URL in state\r\n         URL.revokeObjectURL(url);\r\n       };\r\n       image.src = imageUrl;\r\n"
                },
                {
                    "date": 1714646281457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,122 +1,83 @@\n-import React, {useState, useEffect/*, useRef */ } from 'react';\r\n+import React, { useEffect/*, useRef */ } from 'react';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n \r\n const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n     const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n     let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            // const AdminDetails = {\r\n+            //     \"id\": localStorage.getItem(\"admin_id\"),\r\n+            //     \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+            //     \"type\": \"Person\"\r\n+            // }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n \r\n-  const [pdfUrl, setPdfUrl] = useState('');\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n \r\n-  useEffect(() => {\r\n-    async function convertImageToPdf(imageUrl) {\r\n-      const image = new Image();\r\n-      image.crossOrigin = 'Anonymous'; // Needed for CORS-enabled images\r\n-      image.onload = () => {\r\n-        const canvas = document.createElement('canvas');\r\n-        canvas.width = image.width;\r\n-        canvas.height = image.height;\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n \r\n-        const ctx = canvas.getContext('2d');\r\n-        ctx.drawImage(image, 0, 0);\r\n \r\n-        const pdfContent = canvas.toDataURL('image/jpeg');\r\n-        const pdfDoc = {\r\n-          content: [\r\n-            {\r\n-              image: pdfContent,\r\n-              width: canvas.width,\r\n-              height: canvas.height,\r\n-            },\r\n-          ],\r\n-        };\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        // newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n \r\n-        const blob = new Blob([JSON.stringify(pdfDoc)], { type: 'application/pdf' });\r\n-        const url = URL.createObjectURL(blob);\r\n-        console.log(blob,pdfDoc)\r\n-        setPdfUrl(url); // Set the PDF URL in state\r\n-        URL.revokeObjectURL(url);\r\n-      };\r\n-      image.src = imageUrl;\r\n-    }\r\n \r\n-    convertImageToPdf(url);\r\n-  }, []);\r\n-console.log(pdfUrl)\r\n-  \r\n-//     useEffect(() => {\r\n-//         const viewSDKClient = new ViewSDKClient();\r\n-//         viewSDKClient.ready().then(() => {\r\n-//             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-//                 showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-//                 showDownloadPDF: true, showPrintPDF: true,\r\n-//             }, url, data, userId, annotationId);\r\n-//             const eventOptions = {\r\n-//                 listenOn: [\r\n-//                     \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-//                 ],\r\n-//             }\r\n-//             // const AdminDetails = {\r\n-//             //     \"id\": localStorage.getItem(\"admin_id\"),\r\n-//             //     \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-//             //     \"type\": \"Person\"\r\n-//             // }\r\n-//             previewFilePromise\r\n-//                 .then((adobeViewer) => {\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n \r\n-//                     adobeViewer.getAnnotationManager()\r\n-//                         .then(annotationManager => {\r\n-\r\n-//                             if (annotationData.length === 0) {\r\n-//                                 console.log(\"No Annotation data\")\r\n-//                             }\r\n-//                             else {\r\n-//                                 annotationManager.addAnnotations(annotationData)\r\n-//                                 .then(() => console.log(\"Success\"))\r\n-//                                 .catch(error => console.log(error));\r\n-//                             }\r\n-\r\n-\r\n-//                             annotationManager.getAnnotations()\r\n-//                                 .then(result => {\r\n-//                                     viewSDKClient.annots = result;\r\n-//                                 })\r\n-//                                 .catch(e => {\r\n-//                                     console.log(e);\r\n-//                                 });\r\n-//                             annotationManager.registerEventListener(\r\n-//                                 function (event) {\r\n-//                                     // console.log(event.type, event.data, event)\r\n-//                                     if (event.type === 'ANNOTATION_ADDED') {\r\n-//                                         // Include AdminDetails for annotations \r\n-//                                         const newAnnotation = event.data;\r\n-//                                         // newAnnotation.creator = AdminDetails;\r\n-//                                         viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-//                                     }\r\n-//                                     else if (event.type === 'ANNOTATION_UPDATED') {\r\n-//                                         viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-//                                     } else if (event.type === 'ANNOTATION_DELETED') {\r\n-//                                         viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-//                                     }\r\n-//                                 },\r\n-//                                 eventOptions,\r\n-//                             );\r\n-\r\n-\r\n-//                         })\r\n-//                         .catch(e => {\r\n-//                             console.log(e);\r\n-//                         });\r\n-//                 })\r\n-//                 .catch(e => {\r\n-//                     console.log(e);\r\n-//                 });\r\n-\r\n-//             viewSDKClient.registerSaveApiHandler();\r\n-//             viewSDKClient.registerGetUserProfileApiHandler()\r\n-//         });\r\n-// // eslint-disable-next-line\r\n-//     }, [annotationId, annotationData]);\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+            viewSDKClient.registerGetUserProfileApiHandler()\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n     return (\r\n         <div style={{ height: \"100vh\" }}>\r\n             <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n         </div>\r\n@@ -124,130 +85,4 @@\n }\r\n \r\n export default AdobePDFViewer;\r\n \r\n-import React, {useState, useEffect/*, useRef */ } from 'react';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-\r\n-const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n-    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n-    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n-\r\n-  const [pdfUrl, setPdfUrl] = useState('');\r\n-\r\n-  useEffect(() => {\r\n-    async function convertImageToPdf(imageUrl) {\r\n-      const image = new Image();\r\n-      image.crossOrigin = 'Anonymous'; // Needed for CORS-enabled images\r\n-      image.onload = () => {\r\n-        const canvas = document.createElement('canvas');\r\n-        canvas.width = image.width;\r\n-        canvas.height = image.height;\r\n-\r\n-        const ctx = canvas.getContext('2d');\r\n-        ctx.drawImage(image, 0, 0);\r\n-\r\n-        const pdfContent = canvas.toDataURL('image/jpeg');\r\n-        const pdfDoc = {\r\n-          content: [\r\n-            {\r\n-              image: pdfContent,\r\n-              width: canvas.width,\r\n-              height: canvas.height,\r\n-            },\r\n-          ],\r\n-        };\r\n-\r\n-        const blob = new Blob([JSON.stringify(pdfDoc)], { type: 'application/pdf' });\r\n-        const url = URL.createObjectURL(blob);\r\n-        setPdfUrl(url); // Set the PDF URL in state\r\n-        URL.revokeObjectURL(url);\r\n-      };\r\n-      image.src = imageUrl;\r\n-    }\r\n-\r\n-    convertImageToPdf(url);\r\n-  }, []);\r\n-console.log(pdfUrl)\r\n-  \r\n-//     useEffect(() => {\r\n-//         const viewSDKClient = new ViewSDKClient();\r\n-//         viewSDKClient.ready().then(() => {\r\n-//             const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n-//                 showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n-//                 showDownloadPDF: true, showPrintPDF: true,\r\n-//             }, url, data, userId, annotationId);\r\n-//             const eventOptions = {\r\n-//                 listenOn: [\r\n-//                     \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n-//                 ],\r\n-//             }\r\n-//             // const AdminDetails = {\r\n-//             //     \"id\": localStorage.getItem(\"admin_id\"),\r\n-//             //     \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n-//             //     \"type\": \"Person\"\r\n-//             // }\r\n-//             previewFilePromise\r\n-//                 .then((adobeViewer) => {\r\n-\r\n-//                     adobeViewer.getAnnotationManager()\r\n-//                         .then(annotationManager => {\r\n-\r\n-//                             if (annotationData.length === 0) {\r\n-//                                 console.log(\"No Annotation data\")\r\n-//                             }\r\n-//                             else {\r\n-//                                 annotationManager.addAnnotations(annotationData)\r\n-//                                 .then(() => console.log(\"Success\"))\r\n-//                                 .catch(error => console.log(error));\r\n-//                             }\r\n-\r\n-\r\n-//                             annotationManager.getAnnotations()\r\n-//                                 .then(result => {\r\n-//                                     viewSDKClient.annots = result;\r\n-//                                 })\r\n-//                                 .catch(e => {\r\n-//                                     console.log(e);\r\n-//                                 });\r\n-//                             annotationManager.registerEventListener(\r\n-//                                 function (event) {\r\n-//                                     // console.log(event.type, event.data, event)\r\n-//                                     if (event.type === 'ANNOTATION_ADDED') {\r\n-//                                         // Include AdminDetails for annotations \r\n-//                                         const newAnnotation = event.data;\r\n-//                                         // newAnnotation.creator = AdminDetails;\r\n-//                                         viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n-//                                     }\r\n-//                                     else if (event.type === 'ANNOTATION_UPDATED') {\r\n-//                                         viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n-//                                     } else if (event.type === 'ANNOTATION_DELETED') {\r\n-//                                         viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n-//                                     }\r\n-//                                 },\r\n-//                                 eventOptions,\r\n-//                             );\r\n-\r\n-\r\n-//                         })\r\n-//                         .catch(e => {\r\n-//                             console.log(e);\r\n-//                         });\r\n-//                 })\r\n-//                 .catch(e => {\r\n-//                     console.log(e);\r\n-//                 });\r\n-\r\n-//             viewSDKClient.registerSaveApiHandler();\r\n-//             viewSDKClient.registerGetUserProfileApiHandler()\r\n-//         });\r\n-// // eslint-disable-next-line\r\n-//     }, [annotationId, annotationData]);\r\n-    return (\r\n-        <div style={{ height: \"100vh\" }}>\r\n-            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n-        </div>\r\n-    );\r\n-}\r\n-\r\n-export default AdobePDFViewer;\r\n-\r\n"
                }
            ],
            "date": 1714546676408,
            "name": "Commit-0",
            "content": "import React, { useEffect/*, useRef */ } from 'react';\r\nimport ViewSDKClient from './ViewSDKClient.js';\r\n\r\nconst AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n    useEffect(() => {\r\n        const viewSDKClient = new ViewSDKClient();\r\n        viewSDKClient.ready().then(() => {\r\n            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n                showDownloadPDF: true, showPrintPDF: true,\r\n            }, url, data, userId, annotationId);\r\n            const eventOptions = {\r\n                listenOn: [\r\n                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n                ],\r\n            }\r\n            const AdminDetails = {\r\n                \"id\": localStorage.getItem(\"admin_id\"),\r\n                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n                \"type\": \"Person\"\r\n            }\r\n            previewFilePromise\r\n                .then((adobeViewer) => {\r\n\r\n                    adobeViewer.getAnnotationManager()\r\n                        .then(annotationManager => {\r\n\r\n                            if (annotationData.length === 0) {\r\n                                console.log(\"No Annotation data\")\r\n                            }\r\n                            else {\r\n                                annotationManager.addAnnotations(annotationData)\r\n                                .then(() => console.log(\"Success\"))\r\n                                .catch(error => console.log(error));\r\n                            }\r\n\r\n\r\n                            annotationManager.getAnnotations()\r\n                                .then(result => {\r\n                                    viewSDKClient.annots = result;\r\n                                })\r\n                                .catch(e => {\r\n                                    console.log(e);\r\n                                });\r\n                            annotationManager.registerEventListener(\r\n                                function (event) {\r\n                                    // console.log(event.type, event.data, event)\r\n                                    if (event.type === 'ANNOTATION_ADDED') {\r\n                                        // Include AdminDetails for annotations \r\n                                        const newAnnotation = event.data;\r\n                                        newAnnotation.creator = AdminDetails;\r\n                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n                                        \r\n                                    }\r\n                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n                                    }\r\n                                    viewSDKClient.registerSaveApiHandler()\r\n                                },\r\n                                eventOptions,\r\n                            );\r\n\r\n\r\n                        })\r\n                        .catch(e => {\r\n                            console.log(e);\r\n                        });\r\n                })\r\n                .catch(e => {\r\n                    console.log(e);\r\n                });\r\n\r\n            // viewSDKClient.registerSaveApiHandler();\r\n        });\r\n// eslint-disable-next-line\r\n    }, [annotationId, annotationData]);\r\n    return (\r\n        <div style={{ height: \"100vh\" }}>\r\n            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdobePDFViewer;\r\n\r\n"
        }
    ]
}